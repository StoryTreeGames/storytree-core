const kam = @import("windows").win32.ui.input.keyboard_and_mouse;
const VirtualKey = @import("../input.zig").VirtualKey;

pub fn virtualKeyToCode(virtual_key: VirtualKey) i32 {
    return switch (virtual_key) {
        .back => 0x08,
        .tab => 0x09,
        .clear => 0x0c,
        .@"return" => 0x0d,
        .shift => 0x10,
        .left_shift => 0xa0,
        .right_shift => 0xa1,
        .control => 0x11,
        .left_control => 0xa2,
        .right_control => 0xa3,
        .alt => 0x12,
        .left_alt => 0xa4,
        .right_alt => 0xa5,
        .pause => 0x13,
        .caps_lock => 0x14,
        .kana_hangul => 0x15,
        .ime_on => 0x16,
        .junja => 0x17,
        .final => 0x18,
        .hanja_kanji => 0x19,
        .ime_off => 0x1a,
        .escape => 0x1b,
        .convert => 0x1c,
        .nonconvert => 0x1d,
        .accept => 0x1e,
        .modechange => 0x1f,
        .prior => 0x21,
        .next => 0x22,
        .end => 0x23,
        .home => 0x24,
        .left => 0x25,
        .up => 0x26,
        .right => 0x27,
        .down => 0x28,
        .select => 0x29,
        .print => 0x2a,
        .execute => 0x2b,
        .snapshot => 0x2c,
        .insert => 0x2d,
        .delete => 0x2e,
        .help => 0x2f,
        .left_super => 0x5b,
        .right_super => 0x5c,
        .apps => 0x5d,
        .sleep => 0x5f,
        .numpad0 => 0x60,
        .numpad1 => 0x61,
        .numpad2 => 0x62,
        .numpad3 => 0x63,
        .numpad4 => 0x64,
        .numpad5 => 0x65,
        .numpad6 => 0x66,
        .numpad7 => 0x67,
        .numpad8 => 0x68,
        .numpad9 => 0x69,
        .multiply => 0x6a,
        .add => 0x6b,
        .separator => 0x6c,
        .subtract => 0x6d,
        .decimal => 0x6e,
        .divide => 0x6f,
        .f1 => 0x70,
        .f2 => 0x71,
        .f3 => 0x72,
        .f4 => 0x73,
        .f5 => 0x74,
        .f6 => 0x75,
        .f7 => 0x76,
        .f8 => 0x77,
        .f9 => 0x78,
        .f10 => 0x79,
        .f11 => 0x7a,
        .f12 => 0x7b,
        .f13 => 0x7c,
        .f14 => 0x7d,
        .f15 => 0x7e,
        .f16 => 0x7f,
        .f17 => 0x80,
        .f18 => 0x81,
        .f19 => 0x82,
        .f20 => 0x83,
        .f21 => 0x84,
        .f22 => 0x85,
        .f23 => 0x86,
        .f24 => 0x87,
        .num_lock => 0x90,
        .scroll => 0x91,
        .browser_back => 0xa6,
        .browser_forward => 0xa7,
        .browser_refresh => 0xa8,
        .browser_stop => 0xa9,
        .browser_search => 0xaa,
        .browser_favorites => 0xab,
        .browser_home => 0xac,
        .volume_mute => 0xad,
        .volume_down => 0xae,
        .volume_up => 0xaf,
        .media_next_track => 0xb0,
        .media_prev_track => 0xb1,
        .media_stop => 0xb2,
        .media_play_pause => 0xb3,
        .launch_mail => 0xb4,
        .launch_media_select => 0xb5,
        .launch_app1 => 0xb6,
        .launch_app2 => 0xb7,
        .oem_8 => 0xdf,
        .oem_102 => 0xe2,
        .processkey => 0xe5,
        .packet => 0xe7,
        .attn => 0xf6,
        .crsel => 0xf7,
        .exsel => 0xf8,
        .ereof => 0xf9,
        .play => 0xfa,
        .zoom => 0xfb,
        .noname => 0xfc,
        .pa1 => 0xfd,
        .oem_clear => 0xFE,
    };
}

pub fn codeToVirtualKey(wparam: usize, lparam: isize) ?VirtualKey {
    _ = lparam;
    return switch (wparam) {
        0x08 => .back,
        0x09 => .tab,
        0x0c => .clear,
        0x0d => .@"return",
        0x10, 0xa0, 0xa1 => .shift,
        0x11, 0xa2, 0xa3 => .control,
        0x12, 0xa4, 0xa5 => .alt,
        0x13 => .pause,
        0x14 => .caps_lock,
        0x15 => .kana_hangul,
        0x16 => .ime_on,
        0x17 => .junja,
        0x18 => .final,
        0x19 => .hanja_kanji,
        0x1a => .ime_off,
        0x1b => .escape,
        0x1c => .convert,
        0x1d => .nonconvert,
        0x1e => .accept,
        0x1f => .modechange,
        0x21 => .prior,
        0x22 => .next,
        0x23 => .end,
        0x24 => .home,
        0x25 => .left,
        0x26 => .up,
        0x27 => .right,
        0x28 => .down,
        0x29 => .select,
        0x2a => .print,
        0x2b => .execute,
        0x2c => .snapshot,
        0x2d => .insert,
        0x2e => .delete,
        0x2f => .help,
        0x5b => .left_super,
        0x5c => .right_super,
        0x5d => .apps,
        0x5f => .sleep,
        0x60 => .numpad0,
        0x61 => .numpad1,
        0x62 => .numpad2,
        0x63 => .numpad3,
        0x64 => .numpad4,
        0x65 => .numpad5,
        0x66 => .numpad6,
        0x67 => .numpad7,
        0x68 => .numpad8,
        0x69 => .numpad9,
        0x6a => .multiply,
        0x6b => .add,
        0x6c => .separator,
        0x6d => .subtract,
        0x6e => .decimal,
        0x6f => .divide,
        0x70 => .f1,
        0x71 => .f2,
        0x72 => .f3,
        0x73 => .f4,
        0x74 => .f5,
        0x75 => .f6,
        0x76 => .f7,
        0x77 => .f8,
        0x78 => .f9,
        0x79 => .f10,
        0x7a => .f11,
        0x7b => .f12,
        0x7c => .f13,
        0x7d => .f14,
        0x7e => .f15,
        0x7f => .f16,
        0x80 => .f17,
        0x81 => .f18,
        0x82 => .f19,
        0x83 => .f20,
        0x84 => .f21,
        0x85 => .f22,
        0x86 => .f23,
        0x87 => .f24,
        0x90 => .num_lock,
        0x91 => .scroll,
        0xa6 => .browser_back,
        0xa7 => .browser_forward,
        0xa8 => .browser_refresh,
        0xa9 => .browser_stop,
        0xaa => .browser_search,
        0xab => .browser_favorites,
        0xac => .browser_home,
        0xad => .volume_mute,
        0xae => .volume_down,
        0xaf => .volume_up,
        0xb0 => .media_next_track,
        0xb1 => .media_prev_track,
        0xb2 => .media_stop,
        0xb3 => .media_play_pause,
        0xb4 => .launch_mail,
        0xb5 => .launch_media_select,
        0xb6 => .launch_app1,
        0xb7 => .launch_app2,
        0xdf => .oem_8,
        0xe2 => .oem_102,
        0xe5 => .processkey,
        0xe7 => .packet,
        0xf6 => .attn,
        0xf7 => .crsel,
        0xf8 => .exsel,
        0xf9 => .ereof,
        0xfa => .play,
        0xfb => .zoom,
        0xfc => .noname,
        0xfd => .pa1,
        0xFE => .oem_clear,
        else => null,
    };
}

/// Get whether the key is down
pub fn getKeyState(key: anytype) bool {
    const KEY = @TypeOf(key);
    var value = switch (KEY) {
        u8, u21, u32, comptime_int => @as(i32, @bitCast(@as(u32, @intCast(key)))),
        VirtualKey, @Type(.enum_literal) => virtualKeyToCode(key),
        else => @compileError("expected char or virtual key")
    };

    if (key >= 97 and key <= 122) {
        value = value - 32;
    }

    return (kam.GetKeyState(value) & 0x80) != 0;
}

/// Get whether the key has been set since the last
/// call to this function
pub fn getAsyncKeyState(key: anytype) bool {
    const KEY = @TypeOf(key);
    var value = switch (KEY) {
        u8, u21, u32, comptime_int => @as(i32, @bitCast(@as(u32, @intCast(key)))),
        VirtualKey, @Type(.enum_literal) => virtualKeyToCode(key),
        else => @compileError("expected char or virtual key")
    };

    if (key >= 97 and key <= 122) {
        value = value - 32;
    }

    return (kam.GetAsyncKeyState(value) & 0x01) != 0;
}
